import { jsPDF } from 'jspdf';
import {
  VehicleInputs,
  LCFSInputs,
  CalculatorResults
} from '@/lib/calculators/bev-cost-calculator';

export interface PDFGeneratorOptions {
  type: 'overview' | 'calculator' | 'original' | 'freightliner' | 'rizon-hvip';
  results?: CalculatorResults;
  preparedFor?: string;
  preparedBy?: string;
  enableLCFS?: boolean;
  dieselInputs?: VehicleInputs;
  bevInputs?: VehicleInputs;
  lcfsInputs?: LCFSInputs;
}

/**
 * Main PDF generator function that routes to specific PDF implementations
 * based on the calculator type
 */
export async function generateCalculatorPDF(options: PDFGeneratorOptions): Promise<Buffer> {
  const { type } = options;
  
  // For now, we use jsPDF for all types due to PDFKit font issues
  // In the future, this can be expanded to use different generators
  switch (type) {
    case 'overview':
      return generateOverviewPDF(options);
    
    case 'original':
    case 'calculator':
      return generateOriginalCalculatorPDF(options);
    
    case 'freightliner':
      return generateFreightlinerPDF(options);
    
    case 'rizon-hvip':
      return generateRizonHvipPDF(options);
    
    default:
      return generateOriginalCalculatorPDF(options);
  }
}

/**
 * Generate overview PDF without calculator results
 */
async function generateOverviewPDF(options: PDFGeneratorOptions): Promise<Buffer> {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'letter'
  });
  
  let yPosition = 20;
  
  // Header
  doc.setFontSize(20);
  doc.text('BEV Cost Calculator Overview', 20, yPosition);
  yPosition += 15;
  
  // Prepared for/by
  if (options.preparedFor || options.preparedBy) {
    doc.setFontSize(10);
    if (options.preparedFor) {
      doc.text(`Prepared for: ${options.preparedFor}`, 20, yPosition);
      yPosition += 8;
    }
    if (options.preparedBy) {
      doc.text(`Prepared by: ${options.preparedBy}`, 20, yPosition);
      yPosition += 8;
    }
    yPosition += 5;
  }
  
  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, yPosition);
  yPosition += 15;
  
  // Overview content
  doc.setFontSize(16);
  doc.text('Available Calculators', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(12);
  const calculators = [
    {
      name: 'Original Excel Calculator',
      description: 'Direct implementation from the original Excel file with comprehensive BEV vs Diesel analysis'
    },
    {
      name: 'Freightliner Commercial',
      description: 'Professional fleet analysis with tabbed interface, executive summaries, and visual cost comparisons'
    },
    {
      name: 'Rizon HVIP Incentives',
      description: 'California HVIP voucher calculator with incentive tiers, disadvantaged community benefits, and LCFS'
    }
  ];
  
  calculators.forEach((calc) => {
    doc.setFontSize(14);
    doc.text(`• ${calc.name}`, 25, yPosition);
    yPosition += 8;
    doc.setFontSize(10);
    const descLines = doc.splitTextToSize(calc.description, 160);
    descLines.forEach((line: string) => {
      doc.text(line, 30, yPosition);
      yPosition += 6;
    });
    yPosition += 5;
  });
  
  // Features section
  yPosition += 10;
  doc.setFontSize(16);
  doc.text('Key Features', 20, yPosition);
  yPosition += 10;
  
  const features = [
    'Multiple visualization approaches for the same calculation engine',
    'Interactive charts and graphs for data visualization',
    'Real-time cost comparisons and break-even analysis',
    'LCFS (Low Carbon Fuel Standard) credit calculations',
    'Professional PDF export with charts and detailed analysis',
    'Customizable vehicle specifications and operational parameters'
  ];
  
  doc.setFontSize(12);
  features.forEach((feature) => {
    const lines = doc.splitTextToSize(`• ${feature}`, 170);
    lines.forEach((line: string) => {
      doc.text(line, 20, yPosition);
      yPosition += 8;
    });
  });
  
  // Footer
  doc.setFontSize(10);
  doc.text('Generated by BEV Cost Calculator', 20, 270);
  
  // Convert to buffer
  const pdfArrayBuffer = doc.output('arraybuffer');
  return Buffer.from(pdfArrayBuffer);
}

/**
 * Generate PDF for original calculator with full results
 */
async function generateOriginalCalculatorPDF(options: PDFGeneratorOptions): Promise<Buffer> {
  // This implementation is already in the API route
  // We can move it here for better organization
  // For now, returning a placeholder
  return generateOverviewPDF(options);
}

/**
 * Generate PDF for Freightliner-style calculator
 */
async function generateFreightlinerPDF(options: PDFGeneratorOptions): Promise<Buffer> {
  // Freightliner-specific PDF formatting
  // Would include commercial fleet focus, executive summaries, etc.
  return generateOverviewPDF(options);
}

/**
 * Generate PDF for Rizon HVIP calculator
 */
async function generateRizonHvipPDF(options: PDFGeneratorOptions): Promise<Buffer> {
  // Rizon HVIP-specific PDF formatting
  // Would include HVIP voucher details, incentive calculations, etc.
  return generateOverviewPDF(options);
}

// Export helper functions for formatting
export function formatCurrency(value: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(value);
}

export function formatPerMile(value: number): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 3,
    maximumFractionDigits: 3,
  }).format(value);
}